
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	// TODO: declare here hashmap and initialize it
	
	// TODO: declare here useful classes (constructor, no getters and setters but public properties)
	
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP;
terminal C, CM , S, AUCTION, MIN, EURO, ARROW;
terminal HOUR, CODE;
terminal String ALPHA_STR;
terminal Double CURRENCY;
terminal String USER_CODE, QUOTED_STR;
terminal Integer UINT;

non terminal prog;
non terminal header, hour_list_e, hour, code_;
non terminal currencies, currency;
non terminal user_list_e, user_list;
non terminal user;
non terminal auctions, auction;
non terminal advance_list;
non terminal advance;
non terminal alpha_str;

// TODO: precedences (declare before lower precedences)
//precedence right uminus;
// to be used like:
//MINUS UINT:a  {:
//		RESULT = -a;
//	:} %prec uminus


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP currencies SEP auctions {:
		System.out.println("Correct");
	:}
;

// header

header ::= hour hour_list_e code_ hour_list_e code_ hour_list_e
	| code_ hour hour_list_e code_ hour_list_e
	| code_ code_ hour hour_list_e
;

hour_list_e ::= hour_list_e hour
	|
;

hour ::= HOUR S
;

code_ ::= CODE S
;

// currencies

currencies ::= currencies currency
	| currency currency currency
;

currency ::= CURRENCY alpha_str alpha_str C user_list_e S
;

alpha_str ::= ALPHA_STR
	| EURO
;

user_list_e ::= user_list
	|
;

user_list ::= user_list CM user
	| user
;

user ::= USER_CODE CURRENCY
;

// auctions

auctions ::= auctions auction auction
	|
;

auction ::= AUCTION UINT C QUOTED_STR C UINT MIN ARROW advance_list S
;

advance_list ::= advance_list CM advance
	| advance
;

advance ::= USER_CODE C UINT C CURRENCY EURO
;