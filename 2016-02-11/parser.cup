
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	// TODO: declare here hashmap and initialize it
	
	// TODO: declare here useful classes (constructor, no getters and setters but public properties)
	
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP, DOT, CM, C, S, BO, BC;
terminal START, VAR, MOVE, WHEN, THEN, DONE, AND, OR, NOT, NOTEQ, EQEQ;
terminal CODE, DATE;
terminal Integer INTEGER;
terminal String NAME;

non terminal prog;
non terminal header, code_list_e, code_, date;
non terminal commands, command_list_e, start_cmd, command;
non terminal var_cmd;
non terminal attribute_list;
non terminal attribute;
non terminal move_cmd;
non terminal quantity;
non terminal when_cmd;
non terminal bool_expr;
non terminal move_list;

precedence left OR;
precedence left AND;
precedence right NOT;



//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP commands {:
		System.out.println("Correct");
	:}
;

// header

header ::= code_list_e date code_list_e
	| code_list_e
;

code_list_e ::= code_list_e code_
	|
;

code_ ::= CODE S
;

date ::= DATE S
;

// commands

commands ::= start_cmd command_list_e
;

command_list_e ::= command_list_e command
	|
;

start_cmd ::= START INTEGER CM INTEGER CM INTEGER S
;

command ::= var_cmd
	| move_cmd
	| when_cmd
;

var_cmd ::= VAR BO attribute_list BC NAME S
;

attribute_list ::= attribute_list CM attribute CM attribute CM attribute
	| attribute CM attribute CM attribute
;

attribute ::= NAME C INTEGER
;

move_cmd ::= MOVE quantity CM quantity CM quantity S
;

quantity ::= INTEGER
	| NAME DOT NAME
;

when_cmd ::= WHEN bool_expr THEN move_list DONE S
;

bool_expr ::= bool_expr AND bool_expr
	| bool_expr OR bool_expr
	| NOT bool_expr
	| quantity EQEQ quantity
	| quantity NOTEQ quantity
;

move_list ::= move_list move_cmd
	| move_cmd
;