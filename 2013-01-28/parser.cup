
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	// TODO: declare here hashmap and initialize it
	
	// TODO: declare here useful classes (constructor, no getters and setters but public properties)
	
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP;
terminal C, CM, S, PLUS, MINUS, STAR, DIV, RO, RC, SOSO, SCSC, ARROW;
terminal CODICE, DATA;
terminal String NOME, ID_OGG;
terminal Integer UINT;

non terminal prog;
non terminal header, codice_list_e, data_list_e, header_list_e, codice, data;
non terminal obj_decl_list, obj_decl;
non terminal attr_list_e, attr_list;
non terminal attr;
non terminal operation_list_e, operation;
non terminal Integer obj_attr;
non terminal equation_list;
non terminal equation;
non terminal Integer expression;

precedence left PLUS, MINUS;
precedence left STAR, DIV;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP obj_decl_list SEP operation_list_e {:
		System.out.println("Correct");
	:}
;

// header

header ::= codice codice_list_e data header_list_e
	| data data_list_e codice header_list_e
;

codice_list_e ::= codice_list_e codice
	|
;

data_list_e ::= data_list_e data
	|
;

header_list_e ::= header_list_e codice
	| header_list_e data
	|
;

codice ::= CODICE
;

data ::= DATA
;

// objects

obj_decl_list ::= obj_decl_list obj_decl obj_decl
	| obj_decl obj_decl
;

obj_decl ::= NOME C ID_OGG C SOSO attr_list_e SCSC
	| NOME C C SOSO attr_list_e SCSC
;

attr_list_e ::= attr_list
	|
;

attr_list ::= attr_list CM attr
	| attr
;

attr ::= NOME C UINT
;

// operations

operation_list_e ::= operation_list_e operation operation
	|
;

operation ::= obj_attr C equation_list S
;

obj_attr ::= NOME ARROW NOME
;

equation_list ::= equation_list CM equation
	| equation
;

equation ::= expression
;

expression ::= expression PLUS expression
	| expression MINUS expression
	| expression STAR expression
	| expression DIV expression
	| RO expression RC
	| UINT
	| obj_attr
;
