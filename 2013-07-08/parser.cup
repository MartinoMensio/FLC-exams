
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	// TODO: declare here hashmap and initialize it
	
	// TODO: declare here useful classes (constructor, no getters and setters but public properties)
	
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP;
terminal DOT, S, EQ, BO, BC, HASH, AND, OR, EQEQ, STATE, START, PRINT, IF, THEN, ELSE;
terminal HOUR, CODE, IP;
terminal String ID;
terminal Integer INT;

non terminal prog;
non terminal header, hour_ip_list, hour, ip, code_;
non terminal states, state;
non terminal variable_declaration_list;
non terminal variable_declaration;
non terminal transitions;
non terminal start_cmd, command_list_e, command, print_cmd, if_cmd;
non terminal Boolean bool_expr;
non terminal Integer number, variable;

precedence left OR;
precedence left AND;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP states SEP transitions {:
		System.out.println("Correct");
	:}
;

header ::= hour_ip_list code_ hour_ip_list
	| code_ hour_ip_list
	| hour_ip_list code_
	| code_ code_ code_
;

hour_ip_list ::= hour_ip_list hour
	| hour_ip_list ip
	| hour
	| ip
;

hour ::= HOUR S
;

ip ::= IP S
;

code_ ::= CODE S
;

// states

states ::= states state state
	| state state state
;

state ::= STATE ID BO variable_declaration_list BC
;

variable_declaration_list ::= variable_declaration_list variable_declaration
	| variable_declaration
;

variable_declaration ::= ID EQ INT S
;

// transitions

transitions ::= start_cmd command_list_e
;

start_cmd ::= START ID S
;

command_list_e ::= command_list_e command
	|
;

command ::= print_cmd
	| if_cmd
;

print_cmd ::= PRINT S
;

if_cmd ::= IF STATE ID HASH bool_expr THEN STATE ID S
	| IF STATE ID HASH bool_expr THEN STATE ID S ELSE STATE ID S
;

bool_expr ::= bool_expr AND bool_expr
	| bool_expr OR bool_expr
	| number EQEQ number
;

number ::= INT
	| variable
;

variable ::= ID DOT ID
;